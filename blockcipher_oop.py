# -*- coding: utf-8 -*-
"""BlockCipher.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8VSGT9ZjXToYlhivK3pd0wy6Md7NBUX
"""

!pip install pycrypto

import base64
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
from Crypto.Cipher import DES
class BlockCipher(object):

    def __init__(self, encryption, key): 
        self.encryption = encryption
        
        if(self.encryption == "AES"):
          self.bs = 16
          self.key = hashlib.md5(key.encode()).digest()
        elif(self.encryption == "DES"):
          self.bs = 8
          self.key = hashlib.md5(key.encode()).digest()[:8]
          

    def encrypt(self,raw):
      if(self.encryption == "AES"):
        raw = self._pad(raw)
        iv = Random.new().read(AES.block_size)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        #print AES.block_size
      
      elif(self.encryption =="DES"):
        raw = self._pad(raw)
        iv = Random.new().read(DES.block_size)
        cipher = DES.new(self.key, DES.MODE_CBC, iv)
        #print DES.block_size

      return base64.b64encode(iv + cipher.encrypt(raw))
    
    def decrypt(self,enc):
      enc = base64.b64decode(enc)
      
      if(self.encryption == "AES"):
        iv = enc[:AES.block_size]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        res = self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')
      
      elif(self.encryption == "DES"):
        iv = enc[:DES.block_size]
        cipher = DES.new(self.key, DES.MODE_CBC, iv)
        res = self._unpad(cipher.decrypt(enc[DES.block_size:])).decode('utf-8')
      
      return res

    def _pad(self, s):
        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)

    @staticmethod
    def _unpad(s):
        return s[:-ord(s[len(s)-1:])]

# This way we just provide our password and get back the cipher object. 
# In this case, the IV is slapped in front of the ciphertext before being returned.
cipher = BlockCipher("AES", "password")
ciphertext = cipher.encrypt("encrypt this text please")

cipher2 = BlockCipher("DES", "password")
ciphertext2 = cipher2.encrypt("encrypt this text please")

print (ciphertext)
print (ciphertext2)

print (cipher.decrypt(ciphertext))
print (cipher2.decrypt(ciphertext2))