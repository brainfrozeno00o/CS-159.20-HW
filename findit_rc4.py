# -*- coding: utf-8 -*-
"""FindIt-151253_152516.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oQsXWUUIyj3c7KRe9e9lww7I--NlBvOw

Assignment: FindIt for RC4
Names: Adrian Dominic Danao, John Michael Benedict P. Lingad
ID #s: 151253, 152516
Email Addresses: adrian.danao@obf.ateneo.edu, john.lingad@obf.ateneo.edu
"""

import string, itertools
from timeit import default_timer as timer
from re import findall

#definition for encryption and decryption method for rc4
#got from Stream Cipher Notebook where code is from
#Jurriaan Bremer, 2016

def canonicalize(s):
  return "".join(filter(str.isupper, s.upper()))

#rc4 encryption-decryption method
def rc4(data, key):
  S, j, out = list(range(256)), 0, []
  
  for i in range(256):
    j = (j + S[i] + ord(key[i % len(key)])) % 256
    S[i], S[j] = S[j], S[i]
    
  i = j = 0
  for ch in data:
    i = (i + 1) % 256
    j = (j + S[i]) % 256
    S[i], S[j] = S[j], S[i]
    out.append(chr(ord(ch) ^ S[(S[i] + S[j]) % 256]))
    
  return "".join(out)

#initializations of the key, message, plaintext, and ciphertext here
#this is based on the rc4 FindIt example in the Stream Cipher Notebook

key = "test"
message = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam elementum tempor mattis. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Aenean a eros sed sem convallis tempor. In ac massa nisl. Aenean consectetur volutpat turpis, ut porta lectus. Curabitur consequat lacus id turpis mattis, sed tincidunt tortor vestibulum. Nam sit amet erat sit amet metus lacinia ultricies ac eu odio. Morbi laoreet non sapien et tincidunt. Nulla accumsan dignissim metus. Curabitur sed facilisis purus. Nam eu elementum sapien. Nam a felis elit. Nam mattis, odio a cursus fermentum, est leo venenatis libero, et consectetur justo risus non nibh. Nullam euismod accumsan orci, ut blandit purus. Sed eget tempus leo. Ut ex turpis, consectetur ac maximus ut, lobortis eleifend purus." 

ciphertext = rc4(message, key)
plaintext = canonicalize(message)

print ciphertext #ciphertext based on the message
print plaintext

#definition for FindIt found here
#structure based from the Stream Cipher Notebook, but modified to make
#it work for rc4

def findit(c,p,start,end,prep=""):
  for pl in range(start, end):
    for item in itertools.product(string.ascii_lowercase, repeat=pl): #case-sensitive for rc4
      pwd_candidate = prep + ''.join(item)
      cipher_candidate = rc4(c, pwd_candidate)
      #force same format as plaintext after decryption; gets the message then turns into plaintext format
      cipher_candidate = canonicalize(cipher_candidate)
      if(cipher_candidate[:10] == p[:10]):
        print("Found: %s: %s, %s" % (pwd_candidate, cipher_candidate[:10], p[:10]))

#running the tests, based on the example but in lowercase

start = timer()
findit(ciphertext, plaintext, 4, 5, "")
end = timer()
print("Elapsed time: %fs\n" % (end - start))

start = timer()
findit(ciphertext, plaintext, 2, 3, "te")
end = timer()
print("Elapsed time: %fs\n" % (end - start))